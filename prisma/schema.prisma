generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  email      String?   @unique
  name       String?
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  id         String    @id @unique @db.Uuid
  contact    String?
  role       String?
  validId    String?   @db.Text
  cart       Cart?
  orders     Orders[]
  status     Status    @default(ACTIVE)
}

model Cart {
  id         String     @id @default(uuid()) @db.Uuid
  userId     String     @unique @db.Uuid
  created_at DateTime?  @default(now()) @db.Timestamptz(6)
  updated_at DateTime?  @updatedAt @db.Timestamptz(6)
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  cartItems  CartItem[]
}

model CartItem {
  id         Int       @id @default(autoincrement())
  cartId     String    @db.Uuid
  productId  Int
  quantity   Float     @default(1)
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  checked    Boolean   @default(false)
  cart       Cart      @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product    Products  @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
}

model Orders {
  userId      String      @db.Uuid
  created_at  DateTime?   @default(now()) @db.Timestamptz(6)
  id          String      @id @default(uuid()) @db.Uuid
  totalPrice  Int?
  modified_at DateTime?   @default(now()) @db.Timestamptz(6)
  orderStatus OrderStatus @default(PENDING)
  orderItem   OrderItem[]
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model OrderItem {
  id         Int       @id @default(autoincrement())
  productId  Int
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  orderId    String    @db.Uuid
  quantity   Float     @default(1)
  order      Orders    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product    Products  @relation(fields: [productId], references: [id])
}

model Products {
  id          Int         @id @default(autoincrement())
  title       String
  description String
  url         String
  price       Int
  stock       Int         @default(0) 
  created_at  DateTime?   @default(now()) @db.Timestamptz(6)
  hidden      Boolean     @default(false)
  isDeleted   Boolean     @default(false)
  CartItem    CartItem[]
  orderItem   OrderItem[]
  farmer      Farmer[]    @relation("FarmerProducts")
}

model Farmer {
  name       String
  contact    String?
  created_at DateTime?  @default(now()) @db.Timestamptz(6)
  id         Int        @id @default(autoincrement())
  products   Products[] @relation("FarmerProducts")
}

// Store configuration for global settings
model StoreConfig {
  id            Int       @id @default(autoincrement())
  key           String    @unique // e.g., "store_hours"
  openingHour   Int       @default(6) // Default: 6 AM
  openingMinute Int       @default(0)
  closingHour   Int       @default(22) // Default: 10 PM
  closingMinute Int       @default(0)
  created_at    DateTime? @default(now()) @db.Timestamptz(6)
  updated_at    DateTime? @updatedAt @db.Timestamptz(6)
}

enum Status {
  ACTIVE
  INACTIVE
  SUSPENDED
  UNVERIFIED
}

enum OrderStatus {
  PENDING
  PROCESSING
  FULFILLED
  CANCELED
}
